% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computeRainfall.R
\name{computeRainfall}
\alias{computeRainfall}
\title{Compute the amount of precipitation given the parameters of a Gamma distribution.}
\usage{
computeRainfall(
  log_alpha = NULL,
  log_beta = NULL,
  simulate = FALSE,
  bias = NULL
)
}
\arguments{
\item{log_alpha}{A grid. The log of the shape parameter ("log_alpha") as returned by downscalePredict.keras when we use the bernouilliGamma loss function.}

\item{log_beta}{A grid. The log of the scale parameter ("log_beta") as returned by downscalePredict.keras when we use the bernouilliGamma loss function.}

\item{simulate}{A logical value. If TRUE then the output is an stochastic sample for the given distribution parameters (p,alpha and beta).}

\item{bias}{An integer. Added to the quantity of rain after its computation, either deterministically or
stochastically. It basically displaces the distribution. Default is NULL.}
}
\value{
A climate4R grid with the deterministic or stochastic temporal serie 
depending on whether the \code{simulate} parameter is FALSE or TRUE.
}
\description{
Compute the amount of precipitation given the parameters of a Gamma distribution
as returned by \code{\link[downscaleR.keras]{downscalePredict.keras}} on a trained model 
(see \code{\link[downscaleR.keras]{downscaleTrain.keras}})
that optimized the loss function \code{\link[downscaleR.keras]{bernouilliGammaLoss}}.
}
\details{
This function uses \code{tensorflow} internally. Please if not, install tensorflow (>= v.)
}
\examples{
\donttest{
require(climate4R.datasets)
require(transformeR)
data("NCEP_Iberia_hus850", "NCEP_Iberia_psl", "NCEP_Iberia_ta850")
x <- makeMultiGrid(NCEP_Iberia_hus850, NCEP_Iberia_psl, NCEP_Iberia_ta850)
data("VALUE_Iberia_pr")
y <- VALUE_Iberia_pr
inputs <- layer_input(shape = c(getShape(x,"lat"),getShape(x,"lon"),getShape(x,"var")))
hidden <- inputs \%>\% 
  layer_conv_2d(filters = 25, kernel_size = c(3,3), activation = 'relu') \%>\%  
  layer_conv_2d(filters = 10, kernel_size = c(3,3), activation = 'relu') \%>\% 
  layer_flatten() \%>\% 
  layer_dense(units = 10, activation = "relu")
outputs1 <- layer_dense(hidden,units = getShape(y,"loc"), activation = "sigmoid")
outputs2 <- layer_dense(hidden,units = getShape(y,"loc"))
outputs3 <- layer_dense(hidden,units = getShape(y,"loc"))
outputs <- layer_concatenate(list(outputs1,outputs2,outputs3))
model <- keras_model(inputs = inputs, outputs = outputs)
y <- gridArithmetics(y,0.99,operator = "-") \%>\% binaryGrid("GT",0,partial = TRUE) 
pred <- downscaleCV.keras(x, y, model,
             sampling.strategy = "kfold.chronological", folds = 4, 
             scaleGrid.args = list(type = "standardize"),
             prepareData.keras.args = list(first.connection = "conv",
                                           last.connection = "dense",
                                           channels = "last"),
             compile.args = list(loss = bernouilliGammaLoss(last.connection = "dense"), 
                                 optimizer = optimizer_adam()),
             fit.args = list(batch_size = 100, epochs = 10, validation_split = 0.1),
             loss = "bernouilliGammaLoss",
             binarySerie = TRUE)
# Deterministic
pred_amo <- computeRainfall(log_alpha = subsetGrid(pred,var = "log_alpha"),
                            log_beta = subsetGrid(pred,var = "log_beta"),
                            bias = 0.99)
# Stochastic
pred_amo <- computeRainfall(log_alpha = subsetGrid(pred,var = "log_alpha"),
                            log_beta = subsetGrid(pred,var = "log_beta"),
                            simulate = TRUE,
                            bias = 0.99)
}                             
}
\seealso{
bernouilliGammaLoss a custom loss function for Bernouilli-Gamma distributions
gaussianLoss a custom loss function for gaussian distributions
downscaleTrain.keras for training a downscaling deep model with keras
downscalePredict.keras for predicting with a keras model
prepareNewData.keras for predictor preparation with new (test) data
}
\author{
J. Bano-Medina
}
